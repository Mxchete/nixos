# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.kernelPackages = pkgs.linuxPackages_cachyos;
  boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "ahci" "thunderbolt" "usb_storage" "usbhid" "sd_mod" ];
  boot.initrd.kernelModules = [ "dm-snapshot" "cryptd" ];
  # define LUKS device
  boot.initrd.luks.devices."cryptroot".device = "/dev/disk/by-label/cryptlvm";
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];
  boot.loader.systemd-boot.consoleMode = "max";
  boot.initrd.systemd.enable = true;
  boot.plymouth = {
    enable = true;
    # theme = "rings";
  };
  boot.extraModprobeConfig = ''
    options snd-hda-intel model=alc4080
  '';

  # Silent Boot
  boot.consoleLogLevel = 3;
  boot.initrd.verbose = false;
  boot.kernelParams = [
    "quiet"
    "splash"
    "boot.shell_on_fail"
    "udev.log_priority=3"
    "rd.systemd.show_status=auto"
  ];
  boot.loader.timeout = 0;

  nixpkgs.config.nvidia.acceptLicense = true;
  services.xserver.videoDrivers = ["nvidia"];

  environment.variables = {
    GBM_BACKEND = "nvidia-drm";
    LIBVA_DRIVER_NAME = "nvidia";
    __GLX_VENDOR_LIBRARY_NAME = "nvidia";
  };

  # environment.sessionVariables.ALSA_CONFIG_UCM2 = let
  #   # Updated version with https://github.com/alsa-project/alsa-ucm-conf/issues/123 bugfix.
  #   alsa-ucm-conf = pkgs.fetchFromGitHub {
  #     owner  = "alsa-project";
  #     repo   = "alsa-ucm-conf";
  #     rev    = "7dda1e21fff6163abfd681380b054f514b3b43bc";
  #     sha256 = "15zlb25dd6v1vdc21mkld75d1q661xhnljk2yfpz25pkjwq7lq9v";
  #   };
  # in "${alsa-ucm-conf}/ucm2";

  environment.systemPackages = with pkgs; [
    # alsa-oss
    # alsa-firmware
    # alsa-utils
    # alsa-tools
    # alsa-ucm-conf
    sof-firmware
    vulkan-loader
    vulkan-validation-layers
    vulkan-tools
  ];

  hardware = {
    graphics = {
      enable = true;
      enable32Bit = true;
      extraPackages = with pkgs; [
        nvidia-vaapi-driver
        vaapiVdpau
        libvdpau-va-gl
      ];
    };
    nvidia = {
      modesetting.enable = true;
      powerManagement.enable = true;
      # powerManagement.finegrained = true;
      open = true;
      package = config.boot.kernelPackages.nvidiaPackages.latest;
      nvidiaSettings = true;
    };
  };

  fileSystems."/" =
    { device = "/dev/disk/by-label/ROOT";
      fsType = "btrfs";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-label/BOOT";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

  swapDevices = [{
    device = "/swap/swapfile";
    size = 16 * 1024; # 16GB
  }];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp7s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.enableAllFirmware = true;
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
